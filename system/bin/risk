#!/system/bin/sh
# Risk - Module Magisk - Clean RAM Cache And Foce Stop Application By Category
RED='\033[0;31m'

GREEN='\033[0;32m'

YELLOW='\033[0;33m'

BLUE='\033[0;34m'

NC='\033[0m'
# MIT License
# 
# Copyright (c) 2024 rakarmp
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
EXCLUDED_APPS_FILE="/sdcard/Android/Risk/excluded_apps.txt"
DEVICE_RAM=$(grep "MemTotal" /proc/meminfo | awk '{print $2}')
DEVICE_CPU=$(grep "processor" /proc/cpuinfo | wc -l)
KERNEL=$(uname -a)
ANDROID=$(getprop ro.build.version.release)
VER=$(grep "set" /data/adb/modules/riskr/module.prop | cut -d'=' -f2)
MODPATH="/data/adb/modules/riskr"

LMKD_LOW=1001
LMKD_MEDIUM=800
LMKD_CRITICAL=0
LMKD_CRITICAL_UPGRADE=false
LMKD_UPGRADE_PRESSURE=100
LMKD_DOWNGRADE_PRESSURE=100
LMKD_KILL_HEAVIEST_TASK=true

check_support() {
cp /data/adb/modules/riskr/system/bin/rish /data/data/com.termux/files/usr/bin/
cp /data/adb/modules/riskr/system/bin/rish_shizuku.dex /data/data/com.termux/files/usr/bin/
if ! pm list packages > /dev/null 2>&1; then
        echo ""
        echo -e "${RED}ROM Not Support, Please Type${NC} ${YELLOW}'rish'${NC} ${RED}First In Your Termux${NC}"
        echo -e "${RED} If You Not Have Shizuku, Please Download In Playstore${NC}"
        echo -e "${RED}And Start Shizuku For Root${NC}"
        echo ""
        exit 0
    fi
}


load_excluded_apps() {
    EXCLUDED_APPS=()
    while IFS= read -r line; do
        # Skip lines starting with //
        if ! echo "$line" | grep -q "^//"; then
            EXCLUDED_APPS+=("$line")
        fi
    done < "$EXCLUDED_APPS_FILE"
}

# Load excluded apps
load_excluded_apps

trim() {
    pm trim-caches 999G
    echo 3 > /proc/sys/vm/drop_caches
    echo -e "${GREEN}RAM Cache Cleared${NC}"
}

is_excluded() {
    local app=$1
    for excluded_app in "${EXCLUDED_APPS[@]}"; do
        if [ "$app" == "$excluded_app" ]; then
            return 0
        fi
    done
    return 1
}

lmksed() {
echo "ro.lmk.low=$LMKD_LOW" > $MODPATH/system.prop
echo "ro.lmk.medium=$LMKD_MEDIUM" >> $MODPATH/system.prop
echo "ro.lmk.critical=$LMKD_CRITICAL" >> $MODPATH/system.prop
echo "ro.lmk.critical_upgrade=$LMKD_CRITICAL_UPGRADE" >> $MODPATH/system.prop
echo "ro.lmk.upgrade_pressure=$LMKD_UPGRADE_PRESSURE" >> $MODPATH/system.prop
echo "ro.lmk.downgrade_pressure=$LMKD_DOWNGRADE_PRESSURE" >> $MODPATH/system.prop
echo "ro.lmk.kill_heaviest_task=$LMKD_KILL_HEAVIEST_TASK" >> $MODPATH/system.prop
}

sosmed() {
    category="$1"
    clear
    echo -e "${YELLOW}Risk Mode -> $mode${NC}"
    trim
    echo -e "${YELLOW}Stopping category apps -> $category${NC}"

    running_apps=""

    if [ "$category" = "sosmed" ] || [ "$category" = "all" ]; then
        social_apps="com.facebook.katana com.facebook.lite com.instagram.android com.twitter.android com.twitter.android.lite com.snapchat.android com.whatsapp com.whatsapp.w4b com.tiktok org.telegram.messenger org.telegram.messenger.web org.thunderdog.challegram com.michatapp.im com.ss.android.ugc.trill com.zhiliaoapp.musically com.zhiliaoapp.musically.go com.instagram.lite"
        installed_social_apps=""
        for app in $social_apps; do
            if pm list packages | grep -q "$app"; then
                installed_social_apps="$installed_social_apps $app"
            fi
        done
        running_apps="$installed_social_apps"
    fi

    for app in $running_apps; do
        package_name=$(echo "$app" | sed 's/package://')
        if ! is_excluded "$package_name"; then
            echo -e "${RED}Stopping $package_name${NC}"
            am force-stop "$package_name"
        else
            echo -e "${BLUE}Skipping $package_name (exception)${NC}"
        fi
    done
    exit 0
}

stop_apps() {
    category="$1"
    clear
    echo -e "${YELLOW}Risk Mode -> $mode${NC}"
    trim
    echo -e "${YELLOW}Stopping category apps -> $category${NC}"

    running_apps=$(pm list packages -3)
    if [ "$category" = "google" ] || [ "$category" = "all" ]; then
        running_apps="$running_apps $(pm list packages | grep 'com.google')"
    fi
    if [ "$category" = "system" ] || [ "$category" = "all" ]; then
        running_apps="$running_apps $(pm list packages -s)"
    fi

    for app in $running_apps; do
        package_name=$(echo "$app" | sed 's/package://')
        if ! is_excluded "$package_name"; then
            echo -e "${RED}Stop $package_name${NC}"
            am force-stop "$package_name"
        else
            echo -e "${BLUE}Skipping $package_name (exception)${NC}"
        fi
    done
    exit 0
}

clean_third_party_apps() {
    clear
    echo -e "${YELLOW}Cleaning third-party apps cache${NC}"
    echo ""
    third_party_apps=$(pm list packages -3 | sed 's/package://')

    for app in $third_party_apps; do
        echo -e "${RED}Cleaning cache for $app${NC}"
        pm trim-caches 100M
    done
    echo ""
    exit 0
}

custom_menu() {
    while true; do
        echo -e "${BLUE}Select the application category you want to stop:${NC}"
        echo "1. Third party applications"
        echo "2. Google Apps"
        echo "3. System applications"
        echo "4. All applications"
        echo "5. Social Media"
        echo "0. Return to main menu"
        printf "Options: "
        read -r choice

        case $choice in
            1)
                stop_apps "third_party"
                ;;
            2)
                stop_apps "google"
                ;;
            3)
                stop_apps "system"
                ;;
            4)
                stop_apps "all"
                ;;
            5)
                sosmed "sosmed"
                ;;
            0)
                clear
                return
                ;;
            *)
                echo -e "${RED}Invalid Selection. Are You Blind?${NC}"
                ;;
        esac
    done
}

check_lmk_support() {
    if [ ! -d "/sys/module/lowmemorykiller" ]; then
        echo ""
        echo "${RED}Your Kernel Not Support LMK${NC}"
        echo ""
        exit 0
    fi
}

lmkd_menu() {
LMKD_STATUS=$(cat $MODPATH/system/bin/lmkd_status)
while true; do
    echo " "
    echo -e "${YELLOW}DEVICE RAM -> $DEVICE_RAM${NC}"
    echo -e "${YELLOW}DEVICE CPU -> $DEVICE_CPU${NC}"
    echo -e "${YELLOW}LMKD STATUS -> $LMKD_STATUS${NC}"
    echo " "
        echo -e "${BLUE}LMKD Available Mode:${NC}"
        echo "1. Easy ${YELLOW}(NEED REBOOT)${NC}"
        echo "   Suitable for daily use"
        echo "   which is not too intensive."
        echo "2. Medium ${YELLOW}(NEED REBOOT)${NC}"
        echo "   Suitable for daily use "
        echo "   intensive ones, such as playing games or "
        echo "   use applications that require "
        echo "   high resource."
        echo "3. Hard ${YELLOW}(NEED REBOOT)${NC}"
        echo "   Suitable for very use "
        echo "   intensive, like playing a very game"
        echo "   heavy or using applications that "
        echo "   require very high resources."
        echo "4. Reset LMKD ${YELLOW}(NEED REBOOT)${NC}"
        echo "5. Return to main menu"
        printf "Options: "
        read -r MODE

case $MODE in
  1)
    clear
    sleep 1
    LMKD_LOW=1500
    echo -e "${RED}LMKD LOW SET TO -->  $LMKD_LOW${NC}"
    LMKD_MEDIUM=1000
    echo -e "${RED}LMKD MEDIUM SET TO -->  $LMKD_MEDIUM${NC}"
    LMKD_CRITICAL=0
    echo -e "${RED}LMKD CRITICAL SET TO -->  $LMKD_CRITICAL${NC}"
    LMKD_CRITICAL_UPGRADE=false
    echo -e "${RED}LMKD CRITICAL UPGRADE SET TO -->  $LMKD_CRITICAL_UPGRADE${NC}"
    LMKD_UPGRADE_PRESSURE=50
    echo -e "${RED}LMKD CRITICAL PRESSURE SET TO -->  $LMKD_CRITICAL_PRESSURE${NC}"
    LMKD_DOWNGRADE_PRESSURE=50
    echo -e "${RED}LMKD DOWNGRADE PRESSURE SET TO -->  $LMKD_DOWNGRADE_PRESSURE${NC}"
    LMKD_KILL_HEAVIEST_TASK=false
    echo -e "${RED}LMKD KILL HEAVIEST TASK SET TO -->  $LMKD_KILL_HEAVIEST_TASK${NC}"
    lmksed
    echo "Easy" > $MODPATH/system/bin/lmkd_status
    sleep 1
    echo " "
    echo -e "${YELLOW}NEED REBOOT TO APPLY LMKD${NC}"
    echo " "
    exit 0
    ;;
  2)
    clear
    sleep 1
    LMKD_LOW=1001
    echo -e "${RED}LMKD LOW SET TO -->  $LMKD_LOW${NC}"
    LMKD_MEDIUM=800
    echo -e "${RED}LMKD MEDIUM SET TO -->  $LMKD_MEDIUM${NC}"
    LMKD_CRITICAL=0
    echo -e "${RED}LMKD CRITICAL SET TO -->  $LMKD_CRITICAL${NC}"
    LMKD_CRITICAL_UPGRADE=false
    echo -e "${RED}LMKD CRITICAL UPGRADE SET TO -->  $LMKD_CRITICAL_UPGRADE${NC}"
    LMKD_UPGRADE_PRESSURE=100
    echo -e "${RED}LMKD CRITICAL PRESSURE SET TO -->  $LMKD_CRITICAL_PRESSURE${NC}"
    LMKD_DOWNGRADE_PRESSURE=100
    echo -e "${RED}LMKD DOWNGRADE PRESSURE SET TO -->  $LMKD_DOWNGRADE_PRESSURE${NC}"
    LMKD_KILL_HEAVIEST_TASK=true
    echo -e "${RED}LMKD KILL HEAVIEST TASK SET TO -->  $LMKD_KILL_HEAVIEST_TASK${NC}"
    lmksed
    echo "Medium" > $MODPATH/system/bin/lmkd_status
    sleep 1
    echo " "
    echo -e "${YELLOW}NEED REBOOT TO APPLY LMKD${NC}"
    echo " "
    exit 0
    ;;
  3)
    clear
    sleep 1
    LMKD_LOW=500
    echo -e "${RED}LMKD LOW SET TO -->  $LMKD_LOW${NC}"
    LMKD_MEDIUM=300
    echo -e "${RED}LMKD MEDIUM SET TO -->  $LMKD_MEDIUM${NC}"
    LMKD_CRITICAL=0
    echo -e "${RED}LMKD CRITICAL SET TO -->  $LMKD_CRITICAL${NC}"
    LMKD_CRITICAL_UPGRADE=true
    echo -e "${RED}LMKD CRITICAL UPGRADE SET TO -->  $LMKD_CRITICAL_UPGRADE${NC}"
    LMKD_UPGRADE_PRESSURE=200
    echo -e "${RED}LMKD CRITICAL PRESSURE SET TO -->  $LMKD_CRITICAL_PRESSURE${NC}"
    LMKD_DOWNGRADE_PRESSURE=200
    echo -e "${RED}LMKD DOWNGRADE PRESSURE SET TO -->  $LMKD_DOWNGRADE_PRESSURE${NC}"
    LMKD_KILL_HEAVIEST_TASK=true
    echo -e "${RED}LMKD KILL HEAVIEST TASK SET TO -->  $LMKD_KILL_HEAVIEST_TASK${NC}"
    lmksed
    echo "Hard" > $MODPATH/system/bin/lmkd_status
    sleep 1
    echo " "
    echo -e "${YELLOW}NEED REBOOT TO APPLY LMKD${NC}"
    echo " "
    exit 0
    ;;
  4)
    clear
    rm $MODPATH/system.prop
    touch $MODPATH/system.prop
    echo "No Mode Choice" > $MODPATH/system/bin/lmkd_status
    sleep 1
    echo " "
    echo -e "${YELLOW}NEED REBOOT TO APPLY LMKD${NC}"
    echo " "
    exit 0
    ;;
  5)
    clear
    return
    ;;
  *)
    echo "Are You Blind?"
    exit 1
    ;;
esac
done
}

lmkset() {
LMK="/sys/module/lowmemorykiller/parameters"
    chmod +w $LMK/minfree  > /dev/null 2>&1
    echo "$Front,$Visible,$Second,$Hidden,$content,$empty" > $LMK/minfree  > /dev/null 2>&1
}

set_lmk_minfree() {
    RAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    RAM=$((RAM / 1024))  # Konversi ke MB

    case $1 in
        easy)
            clear
            echo "${RED}LMK minfree set to easy mode${NC}"
            Front=$((($RAM*1/100)*1024/4))
            Visible=$((($RAM*1/100)*1024/4))
            Second=$((($RAM*3/100)*1024/4))
            Hidden=$((($RAM*6/100)*1024/4))
            content=$((($RAM*7/100)*1024/4))
            empty=$((($RAM*8/100)*1024/4))
            lmkset
            sleep 1
            exit 0
            ;;
        medium)
            clear
            echo "${RED}LMK minfree set to medium mode${NC}"
            Front=$((($RAM*2/100)*1024/4))
            Visible=$((($RAM*2/100)*1024/4))
            Second=$((($RAM*4/100)*1024/4))
            Hidden=$((($RAM*7/100)*1024/4))
            content=$((($RAM*8/100)*1024/4))
            empty=$((($RAM*9/100)*1024/4))
            lmkset
            sleep 1
            exit 0
            ;;
        hard)
            clear
            echo "${RED}LMK minfree set to hard mode${NC}"
            Front=$((($RAM*3/100)*1024/4))
            Visible=$((($RAM*3/100)*1024/4))
            Second=$((($RAM*5/100)*1024/4))
            Hidden=$((($RAM*8/100)*1024/4))
            content=$((($RAM*9/100)*1024/4))
            empty=$((($RAM*10/100)*1024/4))
            lmkset
            sleep 1
            exit 0
            ;;
        *)
            return
            ;;
    esac
}

lmk_menu() {
LMK_STATUS="No Mode Choice"
while true; do
    echo " "
    echo -e "${YELLOW}DEVICE RAM -> $DEVICE_RAM${NC}"
    echo -e "${YELLOW}DEVICE CPU -> $DEVICE_CPU${NC}"
    echo -e "${YELLOW}LMK STATUS -> $LMK_STATUS${NC}"
    echo " "
    echo -e "${BLUE}LMK Available Mode:${NC}"
        echo "1. Easy"
        echo "   Suitable for daily use"
        echo "   which is not too intensive."
        echo "2. Medium"
        echo "   Suitable for daily use "
        echo "   intensive ones, such as playing games or "
        echo "   use applications that require "
        echo "   high resource."
        echo "3. Hard"
        echo "   Suitable for very use "
        echo "   intensive, like playing a very game"
        echo "   heavy or using applications that "
        echo "   require very high resources."
        echo "4. Return to main menu"
        printf "Options: "
        read -r choice
    case $choice in
        1)
            set_lmk_minfree easy
            LMK_STATUS="Easy"
            ;;
        2)
            set_lmk_minfree medium
            LMK_STATUS="Medium"
            ;;
        3)
            set_lmk_minfree hard
            LMK_STATUS="Hard"
            ;;
        4)
            clear
            return
            ;;
        *)
            echo "Are You Blind?"
            ;;
    esac
done
}

freeze_apps() {
    clear
    echo -e "${YELLOW}Freezing third-party apps${NC}"

    third_party_apps=$(pm list packages -3 | sed 's/package://')

    echo ""
    index=1
    declare -A app_map > /dev/null 2>&1
    for app in $third_party_apps; do
        app_name=$(pm list packages -f | grep "$app" | sed 's/.*=//' | sed 's/package://')
        app_map[$index]=$app
        if pm list packages -d | grep -q "$app"; then
            echo -e "${YELLOW}${index}. $app${NC} - ${RED}(Frozen)${NC}"
        else
            echo -e "${YELLOW}${index}. $app${NC} - ${GREEN}(Active)${NC}"
        fi
        index=$((index + 1))
    done

    echo " "
    echo "Enter the number of the app you want to freeze (or type 'exit' to quit 'back' to return home)"
    printf "Type:"
    read -r app_number

    if [ "$app_number" = "exit" ]; then
        clear
        echo "By Madafaka"
        clear
        exit 0
    elif [ -n "${app_map[$app_number]}" ]; then
        clear
        sleep 1
        package_name=${app_map[$app_number]}
        echo -e "${RED}Freezing $package_name${NC}"
        pm disable-user --user 0 "$package_name" > /dev/null 2>&1
        echo ""
    elif [ "$app_number" = "back" ]; then
        clear
        return
    else
        echo -e "${BLUE}Are You Blind?${NC}"
    fi

    exit 0
}

unfreeze_apps() {
    clear
    echo -e "${YELLOW}Unfreezing third-party apps${NC}"

    third_party_apps=$(pm list packages -3 | sed 's/package://')

    echo ""
    index=1
    declare -A app_map > /dev/null 2>&1
    for app in $third_party_apps; do
        app_name=$(pm list packages -f | grep "$app" | sed 's/.*=//' | sed 's/package://')
        app_map[$index]=$app
        if pm list packages -d | grep -q "$app"; then
            echo -e "${YELLOW}${index}. $app${NC} - ${RED}(Frozen)${NC}"
        else
            echo -e "${YELLOW}${index}. $app${NC} - ${GREEN}(Active)${NC}"
        fi
        index=$((index + 1))
    done

    echo " "
    echo "Enter the number of the app you want to unfreeze (or type 'exit' to quit 'back' to return home):"
    printf "Type:"
    read -r app_number
        if [ "$app_number" = "exit" ]; then
        echo "Exiting..."
        exit 0
    elif [ -n "${app_map[$app_number]}" ]; then
        clear
        sleep 1
        package_name=${app_map[$app_number]}
        echo -e "${GREEN}Unfreezing $package_name${NC}"
        pm enable "$package_name" > /dev/null 2>&1
        echo ""
    elif [ "$app_number" = "back" ]; then
        clear
        return
    else
        echo -e "${BLUE}Are You Blind?${NC}"
    fi

    exit 0
}

main_menu() {
    while true; do
    echo " "
echo "${BLUE}╔═══╗───╔╗${NC}"
echo "${BLUE}║╔═╗║───║║${NC}"
echo "${BLUE}║╚═╝╠╦══╣║╔╗${NC}"
echo "${BLUE}║╔╗╔╬╣══╣╚╝╝${NC}"
echo "${BLUE}║║║╚╣╠══║╔╗╗${NC}"
echo "${BLUE}╚╝╚═╩╩══╩╝╚╝ CONTROL IS YOURS${NC}"
echo " "
echo "${BLUE}RISK VERSION -> ${VER}${NC}"
echo " "
echo "${BLUE}ANDROID VERSION -> ${ANDROID}${NC}"
echo "${BLUE}KERNEL -> ${KERNEL}:${NC}"
echo " "
        echo "${BLUE}Select mode:${NC}"
        echo "1. Safe ${YELLOW}(stop third party apps only)${NC}"
        echo "2. Aggressive ${YELLOW}(stop third party apps and Google)${NC}"
        echo "3. Custom ${YELLOW}(select the application category you want to stop)${NC}"
        echo "4. LMKD Adjusment A10+"
        echo "5. LMK minfree Adjusment ${YELLOW}(If Your Kernel Support)${NC}"
        echo "6. Clean Cache ${YELLOW}(Only Third Party Apps)${NC}"
        echo "7. Freeze App ${YELLOW}(Third Party Apps)${NC}"
        echo "8. Unfreeze App"
        echo "0. Exit"
        echo "99. Force Exit Termux"
        printf "Options: "
        read -r choice

        case $choice in
            1)
                check_support
                mode="Safe"
                stop_apps "third_party"
                ;;
            2)
                check_support
                mode="Aggresive"
                stop_apps "google"
                ;;
            3)
                clear
                check_support
                custom_menu
                mode="Custom"
                ;;
            4)
                clear
                lmkd_menu
                ;;
            5)
                clear
                check_lmk_support
                lmk_menu
                ;;
            6)
                clear
                check_support
                clean_third_party_apps
                ;;
            7)
                clear
                check_support
                freeze_apps
                ;;
            8)
                clear
                check_support
                unfreeze_apps
                ;;
            0)
                clear
                echo "Bye, Madafaka...."
                sleep 0.5
                clear
                exit 0
                ;;
            99)
                clear
                echo "Bye, Madafaka...."
                sleep 0.5
                am force-stop com.termux
                
                ;;
            *)
                clear
                echo "${RED}Are You Blind?.${NC}"
                ;;
        esac
    done
}
clear
main_menu
